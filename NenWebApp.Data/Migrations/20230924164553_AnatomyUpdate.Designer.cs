// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NenWebApp.Data;

#nullable disable

namespace NenWebApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230924164553_AnatomyUpdate")]
    partial class AnatomyUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NenWebApp.Data.Entities.Anatomy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BodyPart")
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Section")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Anatomies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c809042b-6eb5-4241-bd7f-22caf7507191"),
                            BodyPart = 3,
                            Category = 0,
                            Name = "Forearm",
                            Section = 0
                        },
                        new
                        {
                            Id = new Guid("38ea258c-7df3-4a24-ad1a-138a599ed605"),
                            BodyPart = 3,
                            Category = 0,
                            Name = "Bicep",
                            Section = 0
                        },
                        new
                        {
                            Id = new Guid("64a099c8-702f-4d6f-af79-a8922ebb033f"),
                            BodyPart = 3,
                            Category = 0,
                            Name = "Tricep",
                            Section = 0
                        },
                        new
                        {
                            Id = new Guid("e0af27d6-9a02-4ec5-a2ed-cb2550816b93"),
                            BodyPart = 0,
                            Category = 0,
                            Name = "Chest",
                            Section = 0
                        },
                        new
                        {
                            Id = new Guid("e67fabbc-6edd-4605-baef-363500fafb79"),
                            BodyPart = 0,
                            Category = 0,
                            Name = "Upper Back",
                            Section = 0
                        },
                        new
                        {
                            Id = new Guid("3cc7f935-035b-4722-bcc2-130363295b3d"),
                            BodyPart = 0,
                            Category = 0,
                            Name = "Lower Back",
                            Section = 0
                        },
                        new
                        {
                            Id = new Guid("1c084135-fcb1-4964-93e9-d2bde95014da"),
                            BodyPart = 3,
                            Category = 0,
                            Name = "Shoulder",
                            Section = 0
                        },
                        new
                        {
                            Id = new Guid("973d9b22-552b-4cc0-9a9d-25553cdb91a3"),
                            BodyPart = 2,
                            Category = 0,
                            Name = "Hamstring",
                            Section = 0
                        },
                        new
                        {
                            Id = new Guid("b3563503-ef0f-4101-a535-6b833c1046bc"),
                            BodyPart = 2,
                            Category = 0,
                            Name = "Calf",
                            Section = 0
                        },
                        new
                        {
                            Id = new Guid("882b1801-669d-4446-825e-38bd760789a7"),
                            BodyPart = 2,
                            Category = 0,
                            Name = "Quad",
                            Section = 0
                        },
                        new
                        {
                            Id = new Guid("5337d77e-2cd1-414f-82c6-dccfea529633"),
                            BodyPart = 0,
                            Category = 0,
                            Name = "Abdominal Oblique",
                            Section = 0
                        },
                        new
                        {
                            Id = new Guid("18892b23-81ef-4d9e-b932-726c83ee64f8"),
                            BodyPart = 0,
                            Category = 0,
                            Name = "Rectus Abdominis",
                            Section = 0
                        },
                        new
                        {
                            Id = new Guid("2a575781-4d10-45d0-9416-17771d7c6995"),
                            BodyPart = 2,
                            Category = 2,
                            Name = "Tibialis",
                            Section = 0
                        },
                        new
                        {
                            Id = new Guid("d1171602-cf49-4cc7-9a5f-c45ba6695762"),
                            BodyPart = 2,
                            Category = 1,
                            Name = "Hip",
                            Section = 0
                        },
                        new
                        {
                            Id = new Guid("f9152edf-de00-4f4f-ba8a-258aeccb6a36"),
                            BodyPart = 3,
                            Category = 1,
                            Name = "Wrist",
                            Section = 0
                        },
                        new
                        {
                            Id = new Guid("3622ef3b-7bf1-4d66-8800-94577f9224ca"),
                            BodyPart = 2,
                            Category = 1,
                            Name = "Ankle",
                            Section = 0
                        },
                        new
                        {
                            Id = new Guid("437d5ef7-30a7-4dcf-927f-8d96f72ed913"),
                            BodyPart = 2,
                            Category = 0,
                            Name = "Glute",
                            Section = 0
                        });
                });

            modelBuilder.Entity("NenWebApp.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("NenWebApp.Data.Entities.CoverPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("CoverPhoto");
                });

            modelBuilder.Entity("NenWebApp.Data.Entities.DetailedExercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseInformationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("HighReps")
                        .HasColumnType("int");

                    b.Property<int>("LowReps")
                        .HasColumnType("int");

                    b.Property<int>("Rest")
                        .HasColumnType("int");

                    b.Property<int>("Sets")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkoutId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BaseInformationId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("DetailedExercises");
                });

            modelBuilder.Entity("NenWebApp.Data.Entities.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnatomyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AnatomyId");

                    b.HasIndex("UserId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("NenWebApp.Data.Entities.ExerciseSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Reps")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.ToTable("ExerciseSets");
                });

            modelBuilder.Entity("NenWebApp.Data.Entities.ProgramWorkouts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkoutId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkoutProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutId");

                    b.HasIndex("WorkoutProgramId");

                    b.ToTable("ProgramWorkouts");
                });

            modelBuilder.Entity("NenWebApp.Data.Entities.Workout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.HasIndex("UserId");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("NenWebApp.Data.Entities.WorkoutProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoverPhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("NumberOfDaysPerWeek")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfWeeks")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CoverPhotoId");

                    b.HasIndex("UserId");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NenWebApp.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NenWebApp.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NenWebApp.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NenWebApp.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NenWebApp.Data.Entities.DetailedExercise", b =>
                {
                    b.HasOne("NenWebApp.Data.Entities.Exercise", "BaseInformation")
                        .WithMany("DetailedExercises")
                        .HasForeignKey("BaseInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NenWebApp.Data.Entities.Workout", "Workout")
                        .WithMany("Exercises")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseInformation");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("NenWebApp.Data.Entities.Exercise", b =>
                {
                    b.HasOne("NenWebApp.Data.Entities.Anatomy", "Anatomy")
                        .WithMany()
                        .HasForeignKey("AnatomyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NenWebApp.Data.Entities.ApplicationUser", "User")
                        .WithMany("Exercises")
                        .HasForeignKey("UserId");

                    b.Navigation("Anatomy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NenWebApp.Data.Entities.ExerciseSet", b =>
                {
                    b.HasOne("NenWebApp.Data.Entities.DetailedExercise", "Exercise")
                        .WithMany("ExerciseSets")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("NenWebApp.Data.Entities.ProgramWorkouts", b =>
                {
                    b.HasOne("NenWebApp.Data.Entities.Workout", "Workout")
                        .WithMany()
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NenWebApp.Data.Entities.WorkoutProgram", null)
                        .WithMany("Workouts")
                        .HasForeignKey("WorkoutProgramId");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("NenWebApp.Data.Entities.Workout", b =>
                {
                    b.HasOne("NenWebApp.Data.Entities.WorkoutProgram", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NenWebApp.Data.Entities.ApplicationUser", "User")
                        .WithMany("Workouts")
                        .HasForeignKey("UserId");

                    b.Navigation("Program");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NenWebApp.Data.Entities.WorkoutProgram", b =>
                {
                    b.HasOne("NenWebApp.Data.Entities.CoverPhoto", "CoverPhoto")
                        .WithMany("Programs")
                        .HasForeignKey("CoverPhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NenWebApp.Data.Entities.ApplicationUser", "User")
                        .WithMany("Programs")
                        .HasForeignKey("UserId");

                    b.Navigation("CoverPhoto");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NenWebApp.Data.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Exercises");

                    b.Navigation("Programs");

                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("NenWebApp.Data.Entities.CoverPhoto", b =>
                {
                    b.Navigation("Programs");
                });

            modelBuilder.Entity("NenWebApp.Data.Entities.DetailedExercise", b =>
                {
                    b.Navigation("ExerciseSets");
                });

            modelBuilder.Entity("NenWebApp.Data.Entities.Exercise", b =>
                {
                    b.Navigation("DetailedExercises");
                });

            modelBuilder.Entity("NenWebApp.Data.Entities.Workout", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("NenWebApp.Data.Entities.WorkoutProgram", b =>
                {
                    b.Navigation("Workouts");
                });
#pragma warning restore 612, 618
        }
    }
}
