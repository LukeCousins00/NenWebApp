// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NenWebApp.Data;

#nullable disable

namespace NenWebApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230716202235_Rename-Sets")]
    partial class RenameSets
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.CoverPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("CoverPhoto");
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.DetailedExercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseInformationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("HighReps")
                        .HasColumnType("int");

                    b.Property<int>("LowReps")
                        .HasColumnType("int");

                    b.Property<int>("Rest")
                        .HasColumnType("int");

                    b.Property<int>("Sets")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkoutId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BaseInformationId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("DetailedExercises");
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PrimaryMuscle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Id = new Guid("25ff5ea3-2cc2-4131-b3b6-a31171799c9c"),
                            IsPublic = false,
                            Name = "Pull Up",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Lat",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("227df58b-927f-427f-9499-2f886b11a147"),
                            IsPublic = false,
                            Name = "Lat Pulldown",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Lat",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("d8d2faf0-6575-4d8a-bf8e-011b74c893f9"),
                            IsPublic = false,
                            Name = "Pulldown (Upper Back)",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "UpperBack",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("0e508597-1c09-49c7-ba74-41ea48985cca"),
                            IsPublic = false,
                            Name = "Push Up",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Chest",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("b7b2243c-ddb4-486a-b188-2bd0df9b68ee"),
                            IsPublic = false,
                            Name = "Leg Press",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Quad",
                            Region = "Lower",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("b1ffec69-d67a-4af9-9991-1e36d9dff06e"),
                            IsPublic = false,
                            Name = "Incline Dumbell Curl",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Bicep",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("9cd74a2b-bf27-43c5-8409-9f85f73a9d94"),
                            IsPublic = false,
                            Name = "Decline Dumbell Curl",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Bicep",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("de08bff1-9a0a-433d-bb16-e37b871ed35a"),
                            IsPublic = false,
                            Name = "Dip (Chest)",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Chest",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("b48773ff-92f2-4ea2-837a-0c753a11c643"),
                            IsPublic = false,
                            Name = "Dip (Forearms)",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Forearm",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("294c62d8-f551-48b9-8c96-7a9ab1768986"),
                            IsPublic = false,
                            Name = "Wrist Curl",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Forearm",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("80dda7bd-64cb-466e-b6c7-4096192d7326"),
                            IsPublic = false,
                            Name = "Leg Curl",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Hamstring",
                            Region = "Lower",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("149bf058-f078-4bd0-a60a-c57a63c0767c"),
                            IsPublic = false,
                            Name = "Butterfly Curl",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Hamstring",
                            Region = "Lower",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("5bd1b0d2-3f89-4f0c-83c7-adba1d76cb67"),
                            IsPublic = false,
                            Name = "Overhead Press",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Shoulder",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("346d96f2-81df-4ae5-b36c-67d7fe39de72"),
                            IsPublic = false,
                            Name = "Barbell Bench Press",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Chest",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("0fed9981-bcfa-4fdb-b522-3b4c4643ca98"),
                            IsPublic = false,
                            Name = "Dumbell Bench Press",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Chest",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("0dcfb953-e00d-4d33-a81a-8b313727b9da"),
                            IsPublic = false,
                            Name = "High Row",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Lat",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("b111bdb8-bdad-45fc-916f-ee058ab63a52"),
                            IsPublic = false,
                            Name = "45 Degree Hyperextension",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Glutes",
                            Region = "Lower",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("7aafb241-3b90-4ffd-837b-4801e398008e"),
                            IsPublic = false,
                            Name = "Tricep Pushdown",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Tricep",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("7293d69b-ebef-4f63-8051-39922db86123"),
                            IsPublic = false,
                            Name = "Lu Raise",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Shoulder",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("1c19c41b-2a63-4d85-908f-b72962425e46"),
                            IsPublic = false,
                            Name = "Pike Pushup",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Shoulder",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("399e2534-2121-4ea3-a223-78ef8e9d4a42"),
                            IsPublic = false,
                            Name = "Handstand",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Shoulder",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("7465724a-e4e8-4804-bd4e-bc02ca0df263"),
                            IsPublic = false,
                            Name = "Handstand Pushup",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Shoulder",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("f8a8cf52-7b5b-4dd6-9c78-b2578f96bb3d"),
                            IsPublic = false,
                            Name = "Cable Row (Lats)",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Lat",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("f59d5a83-3925-48b9-a90c-d649be7871b4"),
                            IsPublic = false,
                            Name = "Cable Row (Upper Back)",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "UpperBack",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("0f0c5090-7ea8-4f8b-b4b8-09d38d2e77c5"),
                            IsPublic = false,
                            Name = "Cable Chest Press (Upper)",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Chest",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("e440aa2b-1276-46d0-9475-1a111c4369b8"),
                            IsPublic = false,
                            Name = "Cable Chest Press (Middle)",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Chest",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("b8c4058e-8d7a-449a-86b2-73ff12be2e02"),
                            IsPublic = false,
                            Name = "Cable Chest Press (Lower)",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Chest",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("b2849f0d-507a-4ded-909e-a86dadcffce6"),
                            IsPublic = false,
                            Name = "Hip Adduction",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Hip",
                            Region = "Lower",
                            Type = "Mobility"
                        },
                        new
                        {
                            Id = new Guid("69cbaebe-df3b-480c-b1bc-3b0cf701e7b1"),
                            IsPublic = false,
                            Name = "Hip Abduction",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Hip",
                            Region = "Lower",
                            Type = "Mobility"
                        });
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.ExerciseSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Reps")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.ToTable("ExerciseSets");
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.Workout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ProgramId");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.WorkoutProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoverPhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("NumberOfWeeks")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CoverPhotoId");

                    b.HasIndex("UserId");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NenWebApp.Web.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NenWebApp.Web.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NenWebApp.Web.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NenWebApp.Web.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.DetailedExercise", b =>
                {
                    b.HasOne("NenWebApp.Web.Entities.Exercise", "BaseInformation")
                        .WithMany("DetailedExercises")
                        .HasForeignKey("BaseInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NenWebApp.Web.Entities.Workout", "Workout")
                        .WithMany("Exercises")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseInformation");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.Exercise", b =>
                {
                    b.HasOne("NenWebApp.Web.Entities.ApplicationUser", "User")
                        .WithMany("Exercises")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.ExerciseSet", b =>
                {
                    b.HasOne("NenWebApp.Web.Entities.DetailedExercise", "Exercise")
                        .WithMany("ExerciseSets")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.Workout", b =>
                {
                    b.HasOne("NenWebApp.Web.Entities.ApplicationUser", null)
                        .WithMany("Workouts")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("NenWebApp.Web.Entities.WorkoutProgram", "Program")
                        .WithMany("Workouts")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.WorkoutProgram", b =>
                {
                    b.HasOne("NenWebApp.Web.Entities.CoverPhoto", "CoverPhoto")
                        .WithMany("Programs")
                        .HasForeignKey("CoverPhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NenWebApp.Web.Entities.ApplicationUser", "User")
                        .WithMany("Programs")
                        .HasForeignKey("UserId");

                    b.Navigation("CoverPhoto");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Exercises");

                    b.Navigation("Programs");

                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.CoverPhoto", b =>
                {
                    b.Navigation("Programs");
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.DetailedExercise", b =>
                {
                    b.Navigation("ExerciseSets");
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.Exercise", b =>
                {
                    b.Navigation("DetailedExercises");
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.Workout", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.WorkoutProgram", b =>
                {
                    b.Navigation("Workouts");
                });
#pragma warning restore 612, 618
        }
    }
}
