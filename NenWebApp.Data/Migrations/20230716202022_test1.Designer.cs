// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NenWebApp.Data;

#nullable disable

namespace NenWebApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230716202022_test1")]
    partial class test1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.CoverPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("CoverPhoto");
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.DetailedExercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseInformationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("HighReps")
                        .HasColumnType("int");

                    b.Property<int>("LowReps")
                        .HasColumnType("int");

                    b.Property<int>("Rest")
                        .HasColumnType("int");

                    b.Property<int>("Sets")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkoutId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BaseInformationId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("DetailedExercises");
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PrimaryMuscle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8967e13-11fe-4b44-b5e3-2261d5a4b9a7"),
                            IsPublic = false,
                            Name = "Pull Up",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Lat",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("790889a4-da20-4e75-b492-80c085a0a5c2"),
                            IsPublic = false,
                            Name = "Lat Pulldown",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Lat",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("c5b80c2d-dcc3-4a96-8839-e4bfd211e695"),
                            IsPublic = false,
                            Name = "Pulldown (Upper Back)",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "UpperBack",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("eb745b0c-603f-4d0c-8854-89f88808df00"),
                            IsPublic = false,
                            Name = "Push Up",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Chest",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("03366e72-c705-4c39-a0c6-50618988f72e"),
                            IsPublic = false,
                            Name = "Leg Press",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Quad",
                            Region = "Lower",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("94357de4-12c3-46b8-b30c-eb8b5d65ff0d"),
                            IsPublic = false,
                            Name = "Incline Dumbell Curl",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Bicep",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("beaa4976-ba84-4bcf-94a8-9b3fb533779a"),
                            IsPublic = false,
                            Name = "Decline Dumbell Curl",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Bicep",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("ad5158b3-3d46-4b5c-a07a-e8ce6b323991"),
                            IsPublic = false,
                            Name = "Dip (Chest)",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Chest",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("c999bc01-7b4f-4fae-85b3-c710ffba5ab2"),
                            IsPublic = false,
                            Name = "Dip (Forearms)",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Forearm",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("7a35bb6d-0be1-46fa-83ad-2bece8fb01f8"),
                            IsPublic = false,
                            Name = "Wrist Curl",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Forearm",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("1f55df94-8fee-4e90-87d9-92055cce0a04"),
                            IsPublic = false,
                            Name = "Leg Curl",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Hamstring",
                            Region = "Lower",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("f55d299c-8887-4205-b74d-0f6b7f4171b6"),
                            IsPublic = false,
                            Name = "Butterfly Curl",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Hamstring",
                            Region = "Lower",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("e7ac27c4-a320-4d26-b31a-4a83e25d1a25"),
                            IsPublic = false,
                            Name = "Overhead Press",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Shoulder",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("790c2558-08f7-4264-b05e-6a3ae249cd2d"),
                            IsPublic = false,
                            Name = "Barbell Bench Press",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Chest",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("9dd3a01a-39ae-4cd2-90db-2c2b8b4e6ab1"),
                            IsPublic = false,
                            Name = "Dumbell Bench Press",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Chest",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("8bbdb320-01a6-485e-8da1-0a9171c2b9a1"),
                            IsPublic = false,
                            Name = "High Row",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Lat",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("5b4e6c44-350e-4df0-b508-9a9efbdf314c"),
                            IsPublic = false,
                            Name = "45 Degree Hyperextension",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Glutes",
                            Region = "Lower",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("20651e97-8b9c-4b83-bea2-8ea71eac4f4d"),
                            IsPublic = false,
                            Name = "Tricep Pushdown",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Tricep",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("662e9141-ea13-4180-aa9d-ea738f036630"),
                            IsPublic = false,
                            Name = "Lu Raise",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Shoulder",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("772dc1c2-954e-4493-80aa-9836f3855cb3"),
                            IsPublic = false,
                            Name = "Pike Pushup",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Shoulder",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("0e63ccec-85f2-4fcc-84eb-3000ab9b8e9d"),
                            IsPublic = false,
                            Name = "Handstand",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Shoulder",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("254b3ab8-f483-4682-992e-2fc5745d7743"),
                            IsPublic = false,
                            Name = "Handstand Pushup",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Shoulder",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("fd61febb-d17e-449e-92a1-d8a1672f4894"),
                            IsPublic = false,
                            Name = "Cable Row (Lats)",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Lat",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("4a4df294-996d-4164-85c9-3e869f09739f"),
                            IsPublic = false,
                            Name = "Cable Row (Upper Back)",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "UpperBack",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("3440ac15-0250-4926-b4c1-ea2711297dfc"),
                            IsPublic = false,
                            Name = "Cable Chest Press (Upper)",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Chest",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("e656073f-6541-45f0-a07f-95303f5c190c"),
                            IsPublic = false,
                            Name = "Cable Chest Press (Middle)",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Chest",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("8a7017ac-d861-4c1c-a5c8-f220fab42df6"),
                            IsPublic = false,
                            Name = "Cable Chest Press (Lower)",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Chest",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("65964d5c-75d2-447f-ac75-f3ca096e7e11"),
                            IsPublic = false,
                            Name = "Hip Adduction",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Hip",
                            Region = "Lower",
                            Type = "Mobility"
                        },
                        new
                        {
                            Id = new Guid("3cbc6d24-6c81-4304-b474-8f547807b215"),
                            IsPublic = false,
                            Name = "Hip Abduction",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Hip",
                            Region = "Lower",
                            Type = "Mobility"
                        });
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.ExerciseSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Reps")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.Workout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ProgramId");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.WorkoutProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoverPhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("NumberOfWeeks")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CoverPhotoId");

                    b.HasIndex("UserId");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NenWebApp.Web.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NenWebApp.Web.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NenWebApp.Web.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NenWebApp.Web.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.DetailedExercise", b =>
                {
                    b.HasOne("NenWebApp.Web.Entities.Exercise", "BaseInformation")
                        .WithMany("DetailedExercises")
                        .HasForeignKey("BaseInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NenWebApp.Web.Entities.Workout", "Workout")
                        .WithMany("Exercises")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseInformation");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.Exercise", b =>
                {
                    b.HasOne("NenWebApp.Web.Entities.ApplicationUser", "User")
                        .WithMany("Exercises")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.ExerciseSet", b =>
                {
                    b.HasOne("NenWebApp.Web.Entities.DetailedExercise", "Exercise")
                        .WithMany("ExerciseSets")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.Workout", b =>
                {
                    b.HasOne("NenWebApp.Web.Entities.ApplicationUser", null)
                        .WithMany("Workouts")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("NenWebApp.Web.Entities.WorkoutProgram", "Program")
                        .WithMany("Workouts")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.WorkoutProgram", b =>
                {
                    b.HasOne("NenWebApp.Web.Entities.CoverPhoto", "CoverPhoto")
                        .WithMany("Programs")
                        .HasForeignKey("CoverPhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NenWebApp.Web.Entities.ApplicationUser", "User")
                        .WithMany("Programs")
                        .HasForeignKey("UserId");

                    b.Navigation("CoverPhoto");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Exercises");

                    b.Navigation("Programs");

                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.CoverPhoto", b =>
                {
                    b.Navigation("Programs");
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.DetailedExercise", b =>
                {
                    b.Navigation("ExerciseSets");
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.Exercise", b =>
                {
                    b.Navigation("DetailedExercises");
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.Workout", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("NenWebApp.Web.Entities.WorkoutProgram", b =>
                {
                    b.Navigation("Workouts");
                });
#pragma warning restore 612, 618
        }
    }
}
