// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NenWebApp.Data;

#nullable disable

namespace NenWebApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230618234934_MoreSeeding")]
    partial class MoreSeeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NenWebApp.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("NenWebApp.Entities.CoverPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("CoverPhoto");
                });

            modelBuilder.Entity("NenWebApp.Entities.DetailedExercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseInformationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("HighReps")
                        .HasColumnType("int");

                    b.Property<int>("LowReps")
                        .HasColumnType("int");

                    b.Property<int>("Rest")
                        .HasColumnType("int");

                    b.Property<int>("Sets")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkoutId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BaseInformationId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("DetailedExercises");
                });

            modelBuilder.Entity("NenWebApp.Entities.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PrimaryMuscle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f106b141-bc18-4758-8265-d082ca46ca5f"),
                            IsPublic = false,
                            Name = "Pull Up",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Lat",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("f7388a00-e329-444d-9834-bc0167f3c1e1"),
                            IsPublic = false,
                            Name = "Lat Pulldown",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Lat",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("5ed4928a-1dc2-4044-ada2-90afa6f6a6b6"),
                            IsPublic = false,
                            Name = "Pulldown (Upper Back)",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "UpperBack",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("5a80275a-6eb8-4f56-a1fe-fa6209c7ab2c"),
                            IsPublic = false,
                            Name = "Push Up",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Chest",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("75b6a711-e6f3-43a5-82b3-64abdeaa8179"),
                            IsPublic = false,
                            Name = "Leg Press",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Quad",
                            Region = "Lower",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("8831f8d0-0814-4571-9b39-28c79c123f7d"),
                            IsPublic = false,
                            Name = "Incline Dumbell Curl",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Bicep",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("1f5dd2d0-5d7c-4c14-9a87-7a687acd2d27"),
                            IsPublic = false,
                            Name = "Decline Dumbell Curl",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Bicep",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("ba9345c2-74ca-4c93-ba99-8e2af32adb38"),
                            IsPublic = false,
                            Name = "Dip (Chest)",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Chest",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("a500ca81-5b2e-48e2-a784-24563216e1b1"),
                            IsPublic = false,
                            Name = "Dip (Forearms)",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Forearm",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("86e24576-03d4-418f-b8e5-4bc1936a13a6"),
                            IsPublic = false,
                            Name = "Wrist Curl",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Forearm",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("1b944596-707e-4f8b-8e45-63e9a80fa7a7"),
                            IsPublic = false,
                            Name = "Leg Curl",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Hamstring",
                            Region = "Lower",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("316d16db-6dcd-49bc-8473-7c6db56ae48c"),
                            IsPublic = false,
                            Name = "Butterfly Curl",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Hamstring",
                            Region = "Lower",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("8c6bbf80-f258-4417-82d4-b60854af88db"),
                            IsPublic = false,
                            Name = "Overhead Press",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Shoulder",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("f09fccb1-037f-43c1-8d8a-704900d0eeb5"),
                            IsPublic = false,
                            Name = "Barbell Bench Press",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Chest",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("21e53bc1-114f-4721-927a-7b4a06ea4ab9"),
                            IsPublic = false,
                            Name = "Dumbell Bench Press",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Chest",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("2bada102-9f26-4e25-8347-f5624b3c6ecb"),
                            IsPublic = false,
                            Name = "High Row",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Lat",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("edfa6b5b-3a96-451c-b1e4-a459fb828612"),
                            IsPublic = false,
                            Name = "45 Degree Hyperextension",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Glutes",
                            Region = "Lower",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("e8463e56-4769-445b-bcf2-37a08d2fb5ac"),
                            IsPublic = false,
                            Name = "Tricep Pushdown",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Tricep",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("c8ea79cd-2030-4fa4-b821-d4677aa4acda"),
                            IsPublic = false,
                            Name = "Lu Raise",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Shoulder",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("7a81b7f0-dd70-4946-86cb-754e923ad5df"),
                            IsPublic = false,
                            Name = "Pike Pushup",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Shoulder",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("83256f42-331b-45c0-8de3-fe9666e97a44"),
                            IsPublic = false,
                            Name = "Handstand",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Shoulder",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("91a1dc23-8355-4787-8988-2a5e39efcfe2"),
                            IsPublic = false,
                            Name = "Handstand Pushup",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Shoulder",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("b45ea12e-988e-4f49-a486-ef3fb7ed5bde"),
                            IsPublic = false,
                            Name = "Cable Row (Lats)",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Lat",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("384a3a86-a017-4441-99fb-aff9c9bd2850"),
                            IsPublic = false,
                            Name = "Cable Row (Upper Back)",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "UpperBack",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("c5059951-565e-48f9-b4f2-be6c55c03b73"),
                            IsPublic = false,
                            Name = "Cable Chest Press (Upper)",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Chest",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("e39df392-3344-4eb0-86ef-2646fe3639f6"),
                            IsPublic = false,
                            Name = "Cable Chest Press (Middle)",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Chest",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("0baf325b-b8b1-4221-810e-2d5da10b7d09"),
                            IsPublic = false,
                            Name = "Cable Chest Press (Lower)",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Chest",
                            Region = "Upper",
                            Type = "Strength"
                        },
                        new
                        {
                            Id = new Guid("40f1c44d-ee0d-4823-bafa-05d9e0589e33"),
                            IsPublic = false,
                            Name = "Hip Adduction",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Hip",
                            Region = "Lower",
                            Type = "Mobility"
                        },
                        new
                        {
                            Id = new Guid("bdf7f79c-8be4-42ba-ae94-c259559fdb65"),
                            IsPublic = false,
                            Name = "Hip Abduction",
                            Notes = "This is a default exericse",
                            PrimaryMuscle = "Hip",
                            Region = "Lower",
                            Type = "Mobility"
                        });
                });

            modelBuilder.Entity("NenWebApp.Entities.ExerciseSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Reps")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("NenWebApp.Entities.Workout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ProgramId");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("NenWebApp.Entities.WorkoutProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoverPhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("NumberOfWeeks")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CoverPhotoId");

                    b.HasIndex("UserId");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NenWebApp.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NenWebApp.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NenWebApp.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NenWebApp.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NenWebApp.Entities.DetailedExercise", b =>
                {
                    b.HasOne("NenWebApp.Entities.Exercise", "BaseInformation")
                        .WithMany("DetailedExercises")
                        .HasForeignKey("BaseInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NenWebApp.Entities.Workout", "Workout")
                        .WithMany("Exercises")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseInformation");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("NenWebApp.Entities.Exercise", b =>
                {
                    b.HasOne("NenWebApp.Entities.ApplicationUser", "User")
                        .WithMany("Exercises")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NenWebApp.Entities.ExerciseSet", b =>
                {
                    b.HasOne("NenWebApp.Entities.DetailedExercise", "Exercise")
                        .WithMany("ExerciseSets")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("NenWebApp.Entities.Workout", b =>
                {
                    b.HasOne("NenWebApp.Entities.ApplicationUser", null)
                        .WithMany("Workouts")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("NenWebApp.Entities.WorkoutProgram", "Program")
                        .WithMany("Workouts")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("NenWebApp.Entities.WorkoutProgram", b =>
                {
                    b.HasOne("NenWebApp.Entities.CoverPhoto", "CoverPhoto")
                        .WithMany("Programs")
                        .HasForeignKey("CoverPhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NenWebApp.Entities.ApplicationUser", "User")
                        .WithMany("Programs")
                        .HasForeignKey("UserId");

                    b.Navigation("CoverPhoto");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NenWebApp.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Exercises");

                    b.Navigation("Programs");

                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("NenWebApp.Entities.CoverPhoto", b =>
                {
                    b.Navigation("Programs");
                });

            modelBuilder.Entity("NenWebApp.Entities.DetailedExercise", b =>
                {
                    b.Navigation("ExerciseSets");
                });

            modelBuilder.Entity("NenWebApp.Entities.Exercise", b =>
                {
                    b.Navigation("DetailedExercises");
                });

            modelBuilder.Entity("NenWebApp.Entities.Workout", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("NenWebApp.Entities.WorkoutProgram", b =>
                {
                    b.Navigation("Workouts");
                });
#pragma warning restore 612, 618
        }
    }
}
